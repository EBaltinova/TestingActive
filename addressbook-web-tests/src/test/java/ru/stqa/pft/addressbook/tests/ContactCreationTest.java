package ru.stqa.pft.addressbook.tests;// Generated by Selenium IDE

import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.thoughtworks.xstream.XStream;
import org.openqa.selenium.By;
import org.testng.ITestContext;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;
import ru.stqa.pft.addressbook.appmanager.ContactHelper;
import ru.stqa.pft.addressbook.model.ContactData;
import ru.stqa.pft.addressbook.model.Contacts;

import java.io.*;
import java.util.*;
import java.util.stream.Collectors;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.MatcherAssert.assertThat;

public class ContactCreationTest extends TestBase {

    @DataProvider
    public Iterator<Object[]> validContacts(ITestContext context) throws Exception {
        String format = context.getCurrentXmlTest().getAllParameters().getOrDefault("format", null);
        List<ContactData> contacts;
        switch (format) {
            case "csv":
                contacts = app.contact().validContactsFromCsv("src/test/resources/contactsAll.csv");
                break;
            case "xml":
                contacts = app.contact().validContactsFromXml("src/test/resources/contactsAll.xml");
                break;
            case "json":
                contacts = app.contact().validContactsFromJson("src/test/resources/contactsAll.json");
                break;
            default:
                throw new Exception("Задан неверный формат файла");
        }

        return contacts.stream().map((g) -> new Object[]{g}).collect(Collectors.toList()).iterator();
    }

    @Test(dataProvider = "validContacts")
    public void testContactCreation(ContactData contact) {
        ContactHelper contactHelper = app.contact();
        SoftAssert softAssert = new SoftAssert();
        Contacts before = app.db().contacts();

        assertThat("Add new contact button is not available", contactHelper.isClickable(By.linkText("add new")));
        contactHelper.initContactCreation();

        Arrays
                .asList("bday", "bmonth", "aday", "amonth", "photo", "submit")
                .forEach((String elementName) -> {
                    String message = String.format("Element <%s> is not available", elementName);
                    softAssert.assertTrue(contactHelper.isClickable(By.name(elementName)), message);
                });

        softAssert.assertTrue(contactHelper.isClickable(By.cssSelector("input:nth-child(87)")), "Submit button is not available");
        softAssert.assertAll();

        contactHelper.fillContactForm(contact, true);
        contactHelper.submitContactCreation();
        app.goTo().homePage();
        Contacts after = app.db().contacts();
        assertThat(after, equalTo(before.withAdded(contact.withId(after.stream().mapToInt((c) -> c.getId()).max().getAsInt()))));
        verifyContactListInUI();
    }
}


