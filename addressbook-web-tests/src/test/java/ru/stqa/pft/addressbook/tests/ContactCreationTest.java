package ru.stqa.pft.addressbook.tests;// Generated by Selenium IDE

import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.thoughtworks.xstream.XStream;
import org.openqa.selenium.By;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;
import ru.stqa.pft.addressbook.appmanager.ContactHelper;
import ru.stqa.pft.addressbook.model.ContactData;
import ru.stqa.pft.addressbook.model.Contacts;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.MatcherAssert.assertThat;

public class ContactCreationTest extends TestBase {
    @DataProvider
    public Iterator<Object[]> validContactsFromXml() throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(new File("src/test/resources/contactsAll.xml")))) {
            StringBuilder xml = new StringBuilder();
            String line = reader.readLine();

            while (line != null) {
                xml.append(line);
                line = reader.readLine();
            }

            XStream xstream = new XStream();
            xstream.processAnnotations(ContactData.class);
            List<ContactData> contacts = (List<ContactData>) xstream.fromXML(xml.toString());

            return contacts.stream().map((g) -> new Object[]{g}).collect(Collectors.toList()).iterator();
        }
    }

    @DataProvider
    public Iterator<Object[]> validContactsFromJson() throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/resources/contactsAll.json"))) {
            StringBuilder json = new StringBuilder();
            String line = reader.readLine();

            while (line != null) {
                json.append(line);
                line = reader.readLine();
            }

            Gson gson = new Gson();
            List<ContactData> contacts = gson.fromJson(json.toString(), new TypeToken<List<ContactData>>() {
            }.getType());

            return contacts.stream().map((g) -> new Object[]{g}).collect(Collectors.toList()).iterator();
        }
    }

    @DataProvider
    public Iterator<Object[]> validContactsFromCsv(String path) throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/resources/contactsAll.csv"))) {
            StringBuilder csv = new StringBuilder();
            String line = reader.readLine();
            while (line != null) {
                csv.append(line);
                line = reader.readLine();
            }
            CsvMapper mapper = new CsvMapper();
            MappingIterator<ContactData> personIter = mapper.readerWithTypedSchemaFor(ContactData.class).readValues(String.valueOf(csv));
            List<ContactData> contacts = personIter.readAll();
            return contacts.stream().map((g) -> new Object[]{g}).collect(Collectors.toList()).iterator();
        }
    }


        @Test(dataProvider = "validContactsFromJson")
        public void testContactCreationFromJson (ContactData contact){
            ContactHelper contactHelper = app.contact();
            SoftAssert softAssert = new SoftAssert();
            Contacts before = app.db().contacts();

            assertThat("Add new contact button is not available", contactHelper.isClickable(By.linkText("add new")));
            contactHelper.initContactCreation();

            Arrays
                    .asList("bday", "bmonth", "aday", "amonth", "photo", "submit")
                    .forEach((String elementName) -> {
                        String message = String.format("Element <%s> is not available", elementName);
                        softAssert.assertTrue(contactHelper.isClickable(By.name(elementName)), message);
                    });

            softAssert.assertTrue(contactHelper.isClickable(By.cssSelector("input:nth-child(87)")), "Submit button is not available");
            softAssert.assertAll();

            contactHelper.fillContactForm(contact, true);
            contactHelper.submitContactCreation();
            app.goTo().homePage();
            Contacts after = app.db().contacts();
            assertThat(after, equalTo(before.withAdded(contact.withId(after.stream().mapToInt((c) -> c.getId()).max().getAsInt()))));
            verifyContactListInUI();
        }

        @Test(dataProvider = "validContactsFromCsv")
        public void testContactCreationFromCsv (HashMap < String, ContactData > contactsMap){
            ContactData contact = contactsMap.get("create");
            ContactHelper contactHelper = app.contact();
            SoftAssert softAssert = new SoftAssert();
            Contacts before = app.db().contacts();

            assertThat("Add new contact button is not available", contactHelper.isClickable(By.linkText("add new")));
            contactHelper.initContactCreation();

            Arrays
                    .asList("bday", "bmonth", "aday", "amonth", "photo", "submit")
                    .forEach((String elementName) -> {
                        String message = String.format("Element <%s> is not available", elementName);
                        softAssert.assertTrue(contactHelper.isClickable(By.name(elementName)), message);
                    });

            softAssert.assertTrue(contactHelper.isClickable(By.cssSelector("input:nth-child(87)")), "Submit button is not available");
            softAssert.assertAll();

            contactHelper.fillContactForm(contact, true);
            contactHelper.submitContactCreation();
            app.goTo().homePage();
            Contacts after = app.db().contacts();
            assertThat(after, equalTo(before.withAdded(contact.withId(after.stream().mapToInt((c) -> c.getId()).max().getAsInt()))));
            verifyContactListInUI();
        }

        @Test(dataProvider = "validContactsFromXml")
        public void testContactCreationFromXml (ContactData contact){
            ContactHelper contactHelper = app.contact();
            SoftAssert softAssert = new SoftAssert();
            Contacts before = app.db().contacts();

            assertThat("Add new contact button is not available", contactHelper.isClickable(By.linkText("add new")));
            contactHelper.initContactCreation();

            Arrays
                    .asList("bday", "bmonth", "aday", "amonth", "photo", "submit")
                    .forEach((String elementName) -> {
                        String message = String.format("Element <%s> is not available", elementName);
                        softAssert.assertTrue(contactHelper.isClickable(By.name(elementName)), message);
                    });

            softAssert.assertTrue(contactHelper.isClickable(By.cssSelector("input:nth-child(87)")), "Submit button is not available");
            softAssert.assertAll();

            contactHelper.fillContactForm(contact, true);
            contactHelper.submitContactCreation();
            app.goTo().homePage();
            Contacts after = app.db().contacts();
            assertThat(after, equalTo(before.withAdded(contact.withId(after.stream().mapToInt((c) -> c.getId()).max().getAsInt()))));
            verifyContactListInUI();
        }
    }


